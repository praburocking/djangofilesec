{"version":3,"sources":["shared/components/ColoredButton.js","shared/components/Dropzone.js"],"names":["memo","props","color","children","theme","buttonTheme","createMuiTheme","palette","primary","main","buttonProps","getColor","isDragAccept","success","common","black","withStyles","button","borderWidth","borderColor","borderTopLeftRadius","borderBottomLeftRadius","fullHeight","height","withTheme","onDrop","accept","classes","style","useDropzone","getRootProps","getInputProps","isDragActive","fullWidth","className","classNames","variant"],"mappings":"mMA4BeA,oBAxBf,SAAuBC,GAAQ,IACrBC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,SAAUC,EAAUH,EAAVG,MACnBC,EAAcC,YAAe,2BAC9BF,GAD6B,IAEhCG,QAAS,CACPC,QAAS,CACPC,KAAMP,OAINQ,EAAe,cAAGR,MAAH,EAAUE,MAAV,EAAiBD,SAAjB,oDAAyCF,GAC9D,OACE,kBAAC,IAAD,CAAkBG,MAAOC,GACvB,kBAAC,IAAD,iBAAYK,EAAZ,CAAyBR,MAAM,YAC5BC,Q,iCClBT,gFAmBA,SAASQ,EAASC,EAAcR,GAC9B,OAAIQ,EACKR,EAAMG,QAAQM,QAAQJ,KAGxBL,EAAMG,QAAQO,OAAOC,MAuCfC,sBAxDA,CACbC,OAAQ,CACNC,YAAa,EACbC,YAAa,sBACbC,oBAAqB,EACrBC,uBAAwB,GAE1BC,WAAY,CACVC,OAAQ,SAgDsB,CAAEC,WAAW,GAAhCR,EApCf,SAAkBf,GAAQ,IAChBwB,EAAgExB,EAAhEwB,OAAgBH,GAAgDrB,EAAxDyB,OAAwDzB,EAAhDqB,YAAYnB,EAAoCF,EAApCE,SAAUwB,EAA0B1B,EAA1B0B,QAASC,EAAiB3B,EAAjB2B,MAAOxB,EAAUH,EAAVG,MADvC,EAMnByB,YAAY,CAACJ,WAHfK,EAHqB,EAGrBA,aACAC,EAJqB,EAIrBA,cACAC,EALqB,EAKrBA,aAEF,OACE,kBAAC,IAAD,iBAASF,IAAT,CAAyBP,OAAO,SAC9B,0BAAWQ,KACX,kBAAC,IAAD,CACEE,WAAS,EACTC,UAAWC,IACTb,EAAaK,EAAQL,WAAa,KAClCK,EAAQV,QAEVmB,QAAQ,WACRlC,MAAOS,EAASqB,EAAe5B,GAC/BwB,MAAOA,GAENzB","file":"static/js/13.a3a67e8c.chunk.js","sourcesContent":["import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, createMuiTheme, MuiThemeProvider } from \"@material-ui/core\";\n\nfunction ColoredButton(props) {\n  const { color, children, theme } = props;\n  const buttonTheme = createMuiTheme({\n    ...theme,\n    palette: {\n      primary: {\n        main: color\n      }\n    }\n  });\n  const buttonProps = (({ color, theme, children, ...o }) => o)(props);\n  return (\n    <MuiThemeProvider theme={buttonTheme}>\n      <Button {...buttonProps} color=\"primary\">\n        {children}\n      </Button>\n    </MuiThemeProvider>\n  );\n}\n\nColoredButton.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nexport default memo(ColoredButton);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useDropzone } from \"react-dropzone\";\nimport classNames from \"classnames\";\nimport { Box, withStyles } from \"@material-ui/core\";\nimport ColoredButton from \"./ColoredButton\";\n\nconst styles = {\n  button: {\n    borderWidth: 1,\n    borderColor: \"rgba(0, 0, 0, 0.23)\",\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0\n  },\n  fullHeight: {\n    height: \"100%\"\n  }\n};\n\nfunction getColor(isDragAccept, theme) {\n  if (isDragAccept) {\n    return theme.palette.success.main;\n  }\n\n  return theme.palette.common.black;\n}\n\nfunction Dropzone(props) {\n  const { onDrop, accept, fullHeight, children, classes, style, theme } = props;\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n  } = useDropzone({onDrop});\n  return (\n    <Box {...getRootProps()} height=\"100%\">\n      <input {...getInputProps()} />\n      <ColoredButton\n        fullWidth\n        className={classNames(\n          fullHeight ? classes.fullHeight : null,\n          classes.button\n        )}\n        variant=\"outlined\"\n        color={getColor(isDragActive,  theme)}\n        style={style}\n      >\n        {children}\n      </ColoredButton>\n    </Box>\n  );\n}\n\nDropzone.propTypes = {\n  classes: PropTypes.object.isRequired,\n  theme: PropTypes.object.isRequired,\n  onDrop: PropTypes.func,\n  accept: PropTypes.string,\n  fullHeight: PropTypes.bool,\n  style: PropTypes.object,\n  children: PropTypes.oneOfType([PropTypes.element, PropTypes.func])\n};\n\nexport default withStyles(styles, { withTheme: true })(Dropzone);\n"],"sourceRoot":""}